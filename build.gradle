import com.diffplug.spotless.LineEnding

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.diffplug.spotless' version '6.25.0'
	id 'jacoco'
}

group = 'com.br'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation "org.springframework.boot:spring-boot-starter-actuator"
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation ("com.github.javafaker:javafaker:${javaFakerVersion}") {
		exclude group: 'org.yaml', module: 'snakeyaml'
	}
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDockVersion}"
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


jacoco {
	toolVersion = "0.8.11"
}


spotless {
	java {
		target 'src/**/*.java'
		googleJavaFormat()
		removeUnusedImports()
		cleanthat()
		indentWithSpaces(4)
		formatAnnotations()
		lineEndings = LineEnding.UNIX
	}
}

tasks.named('test') {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
	}
}

check.dependsOn jacocoTestCoverageVerification

jacocoTestCoverageVerification {
	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, exclude: [
							'**/domain/config/*',
							'**/domain/repository/*',
							'**/domain/exception/*',
							'**/domain/service/contract/*',
							"**/domain/cache/contract/*",
							'**/domain/observer/contract/*',
							'**/Application.class',
							'**/domain/DataLoader.class'
					])
				})
		)
	}

	dependsOn jacocoTestReport
	violationRules {
		rule {
			limit {
				minimum = 0.95
			}
		}
	}
}


